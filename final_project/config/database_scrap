//mysql -udebian-sys-maint -pGfrgxVHYov4rndyH

// GRANT ALL PRIVILEGES ON groupdb.* TO 'group'@'localhost' IDENTIFIED BY 'thisgrouprocks';
// create table users(
// 	userid int(10) not null auto_increment,
//  username char(100) not null,
// 	password varchar(100) not null,
// 	description char(50) default 'auto_description',
// 	primary key (userid)
// );

// create table historylist(
// 	foodid int(10) not null auto_increment,
// 	foodName char(20) not null,
// 	userid int(10) not null,
// 	primary key (foodid),
// 	foreign key (userid) references users(userid) on delete cascade
// );

// create table favoritelist(
// 	foodid int(10) not null auto_increment,
// 	foodName char(20) not null,
// 	userid int(10) not null,
// 	primary key (foodid),
// 	foreign key (userid) references users(userid) on delete cascade
// );


// class for handling database connections
// TODO: escape these queries, they are all plain text
// Schema: users(username, password) and todolist(listid, userid, content)

// 	The following methods are injected on the source:

// get[AS] - for example getPictures(finder). The finder object is passed to target.find.
// set[AS] - for example setPictures(instances, defaultAttributes|options). Update the associations. All currently associated models that are not in instances will be removed.
// add[AS] - for example addPicture(instance, defaultAttributes|options). Add another associated object.
// add[AS] [plural] - for example addPictures([instance1, instance2], defaultAttributes|options). Add some more associated objects.
// create[AS] - for example createPicture(values, options). Build and save a new association.
// remove[AS] - for example removePicture(instance). Remove a single association
// has[AS] - for example hasPicture(instance). Is source associated to this target?
// has[AS] [plural] - for example hasPictures(instances). Is source associated to all these targets?
// }